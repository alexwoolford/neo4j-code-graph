name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  # Fix OpenMP conflicts on macOS-like environments
  KMP_DUPLICATE_LIB_OK: "TRUE"
  OMP_NUM_THREADS: "1"

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt', 'pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]
        pip install -r requirements.txt

    - name: Run pre-commit hooks
      run: |
        pre-commit run --all-files

    - name: Run unit tests with coverage (exclude integration + torch-compat)
      env:
        KMP_DUPLICATE_LIB_OK: "TRUE"
        OMP_NUM_THREADS: "1"
      run: |
        TEST_EXIT=0
        python -m coverage erase || true
        python -m coverage run -m pytest tests/ -v -k "not integration and not test_pytorch_api_compatibility" --junitxml=pytest-report.xml | tee pytest-output.txt || TEST_EXIT=$?
        python -m coverage xml -o coverage.xml || true
        python -m coverage report -m || true
        echo "Listing workspace to show coverage.xml presence:" && ls -lah
        exit $TEST_EXIT
    - name: Locate coverage artifacts (debug)
      if: always()
      run: |
        echo "Searching for coverage files..."
        find . -maxdepth 4 \( -name "coverage.xml" -o -name ".coverage*" -o -name "*.coverage" \) -print -ls || true
        if [ -f pytest-report.xml ]; then echo "Found pytest-report.xml"; else echo "pytest-report.xml missing"; fi

    - name: Verify coverage report exists
      if: always()
      run: |
        ls -lh || true
        if [ ! -f coverage.xml ]; then echo "coverage.xml missing"; exit 1; fi
        head -n 5 coverage.xml || true

    - name: Upload coverage.xml as artifact (debug)
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: coverage-xml-${{ matrix.python-version }}
        path: coverage.xml
    - name: Upload pytest JUnit report (debug)
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: junit-${{ matrix.python-version }}
        path: pytest-report.xml
    - name: Upload pytest raw output (debug)
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: pytest-output-${{ matrix.python-version }}
        path: pytest-output.txt

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      if: always()
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: ./coverage.xml
        flags: unittests
        name: codecov-umbrella-${{ matrix.python-version }}
        fail_ci_if_error: false

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install bandit[toml] safety

    - name: Run security checks with bandit
      run: |
        bandit -r src/ -f json -o bandit-report.json || true

    - name: Run dependency vulnerability check
      run: |
        safety check --json --output safety-report.json || true

    - name: Upload security reports
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  quality:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]

    - name: Run all quality checks with pre-commit
      run: |
        pre-commit run --all-files
