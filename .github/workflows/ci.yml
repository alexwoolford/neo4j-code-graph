name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
  schedule:
    - cron: "0 7 * * 1"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  checks: write
  security-events: write
  id-token: write

env:
  # Fix OpenMP conflicts on macOS-like environments
  KMP_DUPLICATE_LIB_OK: "TRUE"
  OMP_NUM_THREADS: "1"

jobs:
  test:
    runs-on: ubuntu-latest
    needs: quality
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: pip
        cache-dependency-path: pyproject.toml

    # setup-python caches pip; drop extra cache step to save time

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]

    # Pre-commit already runs in quality; avoid duplicate work here

    - name: Run unit+integration (containers) with coverage (xdist)
      env:
        KMP_DUPLICATE_LIB_OK: "TRUE"
        OMP_NUM_THREADS: "1"
        NEO4J_URI: ${{ secrets.NEO4J_URI }}
        NEO4J_USERNAME: ${{ secrets.NEO4J_USERNAME }}
        NEO4J_PASSWORD: ${{ secrets.NEO4J_PASSWORD }}
        NEO4J_DATABASE: ${{ secrets.NEO4J_DATABASE }}
      run: |
        TEST_EXIT=0
        python -m pip install --upgrade pip
        python -m pip install pytest-cov pytest-xdist testcontainers[neo4j]
        # Run all non-live tests; integration will start Neo4j via Testcontainers fixture if used
        pytest -m "not live" -n auto \
               --cov=src --cov-report=xml:coverage.xml \
               --junitxml=junit.xml -o junit_family=legacy \
               -k "not test_pytorch_api_compatibility" --disable-warnings \
               | tee pytest-output.txt || TEST_EXIT=$?
        echo "JUnit testcases: $(grep -c '<testcase' junit.xml || true)"
        echo "Listing workspace to show coverage.xml presence:" && ls -lah
        if [ -f coverage.xml ]; then echo "coverage.xml size:" && wc -c coverage.xml; head -n 5 coverage.xml || true; else echo "coverage.xml missing"; fi
        exit $TEST_EXIT

    - name: Upload coverage to Codecov (only on 3.12; OIDC)
      uses: codecov/codecov-action@v5
      if: >
        always() && matrix.python-version == '3.12' &&
        (github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository)
      with:
        use_oidc: true
        files: ./coverage.xml
        disable_search: true
        flags: py${{ matrix.python-version }}
        fail_ci_if_error: true
        verbose: true

    - name: Upload test results to Codecov (OIDC)
      if: >
        always() && matrix.python-version == '3.12' &&
        (github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository)
      uses: codecov/test-results-action@v1
      with:
        use_oidc: true
        files: ./junit.xml
        disable_search: true
        os: linux
        flags: py${{ matrix.python-version }}
        fail_ci_if_error: true

    - name: Publish test summary in GitHub
      if: always() && matrix.python-version == '3.12'
      uses: EnricoMi/publish-unit-test-result-action@v2
      with:
        files: junit.xml

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"
        cache: pip
        cache-dependency-path: pyproject.toml

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install bandit[toml] safety

    - name: Run security checks with bandit
      run: |
        bandit -r src/ -f json -o bandit-report.json || true

    - name: Run dependency vulnerability check
      run: |
        safety check --json --output safety-report.json || true

    - name: Install gitleaks
      run: |
        set -euo pipefail
        GL_VERSION=8.18.4
        curl -sSfL "https://github.com/gitleaks/gitleaks/releases/download/v${GL_VERSION}/gitleaks_${GL_VERSION}_linux_x64.tar.gz" -o /tmp/gitleaks.tgz
        sudo tar -C /usr/local/bin -xzf /tmp/gitleaks.tgz gitleaks
        /usr/local/bin/gitleaks version

    - name: Gitleaks (scan workspace only)
      run: |
        gitleaks detect --no-git --redact --verbose -c .gitleaks.toml || true

    - name: Upload security reports
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  quality:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"
        cache: pip
        cache-dependency-path: pyproject.toml

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]

    - name: Run all quality checks with pre-commit
      uses: pre-commit/action@v3.0.1

  typecheck:
    runs-on: ubuntu-latest
    needs: quality
    continue-on-error: false
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-python@v5
      with:
        python-version: "3.12"
        cache: pip
        cache-dependency-path: pyproject.toml
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]
        npm --version || corepack enable || true
        npx --yes pyright --version || true
    - name: Run pyright (advisory)
      run: |
        npx --yes pyright --stats || true

  live-tests:
    runs-on: ubuntu-latest
    if: >
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'push' && github.ref == 'refs/heads/main') ||
      github.event_name == 'schedule'
    services:
      neo4j:
        image: neo4j:5.26-enterprise
        ports:
          - 7474:7474
          - 7687:7687
        env:
          NEO4J_ACCEPT_LICENSE_AGREEMENT: 'yes'
          NEO4J_PLUGINS: '["apoc", "graph-data-science"]'
          NEO4J_AUTH: 'neo4j/neo4j12345'
    env:
      NEO4J_URI: bolt://127.0.0.1:7687
      NEO4J_USERNAME: neo4j
      NEO4J_PASSWORD: neo4j12345
      NEO4J_DATABASE: neo4j
      KMP_DUPLICATE_LIB_OK: "TRUE"
      OMP_NUM_THREADS: "1"
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: pip
          cache-dependency-path: pyproject.toml
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[dev]
          pip install pytest-cov
      - name: Wait for Neo4j to be ready
        env:
          NEO4J_URI: bolt://127.0.0.1:7687
          NEO4J_USERNAME: neo4j
          NEO4J_PASSWORD: neo4j12345
          NEO4J_DATABASE: neo4j
          NEO4J_WAIT_TIMEOUT_SECONDS: 420
        run: |
          python -m pip install --upgrade pip
          pip install neo4j==5.25.0
          python scripts/wait_for_neo4j.py
      - name: Dump Neo4j logs on failure
        if: failure()
        run: |
          docker ps || true
          docker logs $(docker ps -q --filter name=neo4j) || true
      - name: Run live tests
        run: pytest -q -m live --cov=src --cov-report=xml:coverage-live.xml
      - name: Verify live coverage artifact
        if: always()
        run: |
          echo "Workspace contents after live tests:" && ls -lah
          if [ -f coverage-live.xml ]; then echo "Found coverage-live.xml" && head -n 5 coverage-live.xml; else echo "coverage-live.xml missing"; fi
      - name: Upload live coverage to Codecov (OIDC)
        uses: codecov/codecov-action@v5
        if: >
          always() && (github.event_name == 'workflow_dispatch' || (github.event_name == 'push' && github.ref == 'refs/heads/main') || github.event_name == 'schedule') &&
          hashFiles('coverage-live.xml') != ''
        with:
          use_oidc: true
          files: ./coverage-live.xml
          disable_search: true
          flags: live
          fail_ci_if_error: true
          verbose: true
