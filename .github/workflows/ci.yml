name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
  schedule:
    - cron: "0 7 * * 1"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  checks: write
  security-events: write

env:
  # Fix OpenMP conflicts on macOS-like environments
  KMP_DUPLICATE_LIB_OK: "TRUE"
  OMP_NUM_THREADS: "1"

jobs:
  test:
    runs-on: ubuntu-latest
    needs: quality
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 2

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt', 'pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]
        pip install -r requirements.txt

    - name: Run pre-commit hooks
      run: |
        pre-commit run --all-files

    - name: Run unit tests with coverage (exclude integration + torch-compat)
      env:
        KMP_DUPLICATE_LIB_OK: "TRUE"
        OMP_NUM_THREADS: "1"
        NEO4J_URI: ${{ secrets.NEO4J_URI }}
        NEO4J_USERNAME: ${{ secrets.NEO4J_USERNAME }}
        NEO4J_PASSWORD: ${{ secrets.NEO4J_PASSWORD }}
        NEO4J_DATABASE: ${{ secrets.NEO4J_DATABASE }}
      run: |
        TEST_EXIT=0
        python -m coverage erase || true
        python -m coverage run -m pytest tests/ -q -k "not test_pytorch_api_compatibility" --disable-warnings --junitxml=pytest-report.xml | tee pytest-output.txt || TEST_EXIT=$?
        python -m coverage xml -o coverage.xml || true
        python -m coverage report -m || true
        echo "Listing workspace to show coverage.xml presence:" && ls -lah
        if [ -f coverage.xml ]; then echo "coverage.xml size:" && wc -c coverage.xml; head -n 5 coverage.xml || true; else echo "coverage.xml missing"; fi
        exit $TEST_EXIT
    # Removed temporary debug artifact uploads

    - name: Debug commit association
      if: always()
      run: |
        echo "GITHUB_SHA=${GITHUB_SHA}"
        echo "GITHUB_REF_NAME=${GITHUB_REF_NAME}"
        echo "GITHUB_RUN_ID=${GITHUB_RUN_ID}"

    - name: Upload coverage to Codecov (only on 3.12; skip forks)
      uses: codecov/codecov-action@v5
      if: >
        always() && matrix.python-version == '3.12' &&
        (github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository)
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: ./coverage.xml
        disable_search: true
        override_commit: ${{ github.sha }}
        override_branch: ${{ github.ref_name }}
        override_build: ${{ github.run_id }}
        flags: py${{ matrix.python-version }}
        name: codecov-py${{ matrix.python-version }}
        slug: alexwoolford/neo4j-code-graph
        fail_ci_if_error: true
        verbose: true
        root_dir: .

    - name: Upload test results to Codecov
      if: >
        !cancelled() &&
        matrix.python-version == '3.12' &&
        (github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository)
      uses: codecov/test-results-action@v1
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: pytest-report.xml

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install bandit[toml] safety

    - name: Run security checks with bandit
      run: |
        bandit -r src/ -f json -o bandit-report.json || true

    - name: Run dependency vulnerability check
      run: |
        safety check --json --output safety-report.json || true

    - name: Upload security reports
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  quality:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]

    - name: Run all quality checks with pre-commit
      run: |
        pre-commit run --all-files
