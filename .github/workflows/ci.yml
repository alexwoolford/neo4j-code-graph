name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  # Fix OpenMP conflicts on macOS-like environments
  KMP_DUPLICATE_LIB_OK: "TRUE"
  OMP_NUM_THREADS: "1"

jobs:
  code-quality:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt', 'pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]
        pip install -r requirements.txt

    - name: Run pre-commit hooks
      run: |
        pre-commit run --all-files

    - name: Run unit tests only
      env:
        KMP_DUPLICATE_LIB_OK: "TRUE"
        OMP_NUM_THREADS: "1"
      run: |
        echo "üß™ Running unit tests (fast, no external dependencies)..."
        pytest tests/ -v -m "not integration and not slow" --cov=src --cov-report=xml --cov-report=term-missing

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      if: always()
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  neo4j-tests:
    runs-on: ubuntu-latest
    needs: code-quality
    if: github.event_name == 'push' || github.event_name == 'pull_request'

    services:
      neo4j:
        image: neo4j:5.15
        env:
          NEO4J_AUTH: neo4j/testpassword
          NEO4J_PLUGINS: '["apoc", "graph-data-science"]'
        ports:
          - 7687:7687
          - 7474:7474
        options: >-
          --health-cmd "cypher-shell -u neo4j -p testpassword 'RETURN 1'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt', 'pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Cache test data
      id: cache-test-data
      uses: actions/cache@v3
      with:
        path: ./test_cache
        key: ci-test-data-v1
        restore-keys: |
          ci-test-data-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]
        pip install -r requirements.txt

    - name: Prepare test data
      if: steps.cache-test-data.outputs.cache-hit != 'true'
      run: |
        echo "üèóÔ∏è Preparing minimal test data for CI..."
        python scripts/prepare_ci_test_data.py

    - name: Run data preparation tests
      env:
        KMP_DUPLICATE_LIB_OK: "TRUE"
        OMP_NUM_THREADS: "1"
        NEO4J_URI: bolt://localhost:7687
        NEO4J_USERNAME: neo4j
        NEO4J_PASSWORD: testpassword
        NEO4J_DATABASE: neo4j
      run: |
        echo "üß™ Running integration tests with minimal data..."
        pytest tests/integration/ -v --tb=short

  data-quality:
    runs-on: ubuntu-latest
    needs: code-quality
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]
        pip install -r requirements.txt

    - name: Run data quality tests (main branch only)
      env:
        KMP_DUPLICATE_LIB_OK: "TRUE"
        OMP_NUM_THREADS: "1"
      run: |
        echo "üîç Running data quality tests (slow tests, main branch only)..."
        pytest tests/ -v -m "slow" --tb=short || echo "‚ö†Ô∏è Data quality tests failed (non-blocking)"

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install bandit[toml] safety

    - name: Run security checks with bandit
      run: |
        bandit -r src/ -f json -o bandit-report.json || true

    - name: Run dependency vulnerability check
      run: |
        safety check --json --output safety-report.json || true

    - name: Upload security reports
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  quality:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]

    - name: Run all quality checks with pre-commit
      run: |
        pre-commit run --all-files
