name: Docs
permissions:
  contents: write
on:
  push:
    branches: [ main ]
    paths: [ 'docs/**', 'examples/**' ]
  workflow_dispatch:
jobs:
  build-deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Setup Node deps (Antora via npm)
        run: npm i
      - name: List docs tree
        run: |
          echo "Working directory: $(pwd)"
          ls -la
          echo "--- docs tree ---"
          ls -la docs || true
          echo "--- modules tree ---"
          ls -la docs/modules/ROOT || true
      - name: Build Antora site
        run: |
          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub Actions"
          # Generate/update Prefect DAG image before site build
          python -m pip install graphviz || true
          sudo apt-get update -y && sudo apt-get install -y graphviz || true
          python scripts/generate_prefect_dag.py || true
          # Pre-fetch UI bundle locally to avoid CDN failures (place next to preview.yml)
          mkdir -p docs/.antora
          curl -fsSL https://gitlab.com/antora/antora-ui-default/-/jobs/artifacts/HEAD/raw/build/ui-bundle.zip?job=bundle-stable -o docs/.antora/ui-bundle.zip || true
          if [ ! -s docs/.antora/ui-bundle.zip ]; then
            npm i -D @antora/ui-default@3.1.7
            cp node_modules/@antora/ui-default/ui-bundle.zip docs/.antora/ui-bundle.zip
          fi
          echo "Listing docs/.antora contents:" && ls -la docs/.antora || true
          echo "Inspect UI bundle:" && unzip -l docs/.antora/ui-bundle.zip | head -n 20 || true
          npx -y antora@3.1.12 antora-playbook.yml --stacktrace --fetch --log-level debug
          echo '<!doctype html><meta http-equiv="refresh" content="0; url=neo4j-code-graph/latest/index.html">' > build/site/index.html
          cp build/site/index.html build/site/404.html || true
      - name: Validate Cypher snippets (EXPLAIN)
        run: |
          set -euo pipefail
          python -m pip install --upgrade pip
          pip install neo4j==5.25.0
          # Start a temporary Neo4j (Enterprise) with APOC core + GDS for parity with live-tests
          docker run -d --rm --name neo4j-docs \
            -p 7687:7687 -p 7474:7474 \
            -e NEO4J_ACCEPT_LICENSE_AGREEMENT=yes \
            -e NEO4J_PLUGINS='["apoc","graph-data-science"]' \
            -e NEO4J_AUTH=neo4j/neo4j12345 \
            neo4j:5.26-enterprise
          # Use shared readiness helper for consistency
          export NEO4J_URI=bolt://127.0.0.1:7687
          export NEO4J_USERNAME=neo4j
          export NEO4J_PASSWORD=neo4j12345
          export NEO4J_DATABASE=neo4j
          export NEO4J_WAIT_TIMEOUT_SECONDS=420
          python scripts/wait_for_neo4j.py
          # Seed minimal dataset via HTTP transaction endpoint to avoid interactive shell edge cases
          echo "Seeding dataset via HTTP endpoint..."
          curl -s -u neo4j:neo4j12345 -H "Content-Type: application/json" --data '{"statements":[{"statement":"RETURN 1"}]}' http://127.0.0.1:7474/db/neo4j/tx/commit | cat
          sudo apt-get update -y && sudo apt-get install -y jq
          jq -Rs '{statements:[{statement: .}]}' docs/seed/neo4j_seed.cypher > seed.json
          curl -s -u neo4j:neo4j12345 -H "Content-Type: application/json" --data @seed.json http://127.0.0.1:7474/db/neo4j/tx/commit | cat || (docker logs neo4j-docs | tail -n 200; exit 1)
          # Validate snippets against local Neo4j
          python scripts/validate_cypher_snippets.py docs/modules/ROOT/examples/queries || (docker logs neo4j-docs | tail -n 200; exit 1)
          docker stop neo4j-docs
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: build/site
          publish_branch: gh-pages
