name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  quality:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -e .[dev]
          pip install -r config/requirements.txt
      - name: Run pre-commit
        run: pre-commit run --all-files

  test:
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -e .[dev]
          pip install -r config/requirements.txt
      - name: Run non-live tests
        run: pytest -q -m 'not live'

  typecheck:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -e .[dev]
      - name: mypy
        run: mypy src/

  live-tests:
    runs-on: ubuntu-latest
    services:
      neo4j:
        image: neo4j:5.26-enterprise
        ports:
          - 7474:7474
          - 7687:7687
        env:
          NEO4J_ACCEPT_LICENSE_AGREEMENT: 'yes'
          NEO4J_PLUGINS: '["apoc", "gds"]'
          NEO4J_AUTH: 'neo4j/neo4j'
    env:
      KMP_DUPLICATE_LIB_OK: TRUE
      OMP_NUM_THREADS: 1
      NEO4J_URI: bolt://localhost:7687
      NEO4J_USERNAME: neo4j
      NEO4J_PASSWORD: neo4j
      NEO4J_DATABASE: neo4j
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -e .[dev]
          pip install -r config/requirements.txt
      - name: Wait for Neo4j to be ready
        run: |
          python - << 'PY'
          import time
          from neo4j import GraphDatabase
          uri='bolt://localhost:7687'
          auth=('neo4j','neo4j')
          deadline=time.time()+120
          last=None
          while time.time()<deadline:
              try:
                  with GraphDatabase.driver(uri, auth=auth) as d:
                      with d.session(database='neo4j') as s:
                          s.run('RETURN 1').consume()
                  print('Neo4j is ready')
                  break
              except Exception as e:
                  last=e
                  time.sleep(2)
          else:
              raise SystemExit(f'Neo4j not ready: {last}')
          PY
      - name: Run live tests
        run: pytest -q -m live --cov=src --cov-report=xml:coverage-live.xml
