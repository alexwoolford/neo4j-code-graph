[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "neo4j-code-graph"
version = "1.0.0"
description = "Advanced code analysis platform that creates comprehensive knowledge graphs from ANY codebase"
authors = [
    {name = "Neo4j Code Graph Contributors"}
]
readme = "README.md"
license = {file = "LICENSE"}
requires-python = ">=3.10"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Software Development :: Quality Assurance",
    "Topic :: Software Development :: Version Control :: Git",
]
dependencies = [
    "neo4j>=5.0.0",
    "torch>=1.12.0",
    "transformers>=4.21.0",
    "javalang>=0.13.0",
    "gitpython>=3.1.27",
    "pandas>=1.5.0",
    "tqdm>=4.64.0",
    "requests>=2.28.0",
    "aiohttp>=3.9.0",
    "python-dotenv>=0.20.0",
    "graphdatascience>=1.5.0",
    "packaging>=21.0",
  "prefect>=2.16.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "black>=23.0.0",
    "mypy>=1.0.0",
    "types-requests>=2.32.0",
    "pre-commit>=3.0.0",
    "pytest-mock>=3.10.0",
    "pytest-xdist>=3.0.0",
    "pytest-asyncio>=0.23",
]

[project.urls]
Homepage = "https://github.com/your-org/neo4j-code-graph"
Repository = "https://github.com/your-org/neo4j-code-graph"
Issues = "https://github.com/your-org/neo4j-code-graph/issues"

[project.scripts]
# CLI entry points to run installed commands directly
code-graph-code-to-graph = "analysis.code_analysis:main"
code-graph-git-history = "analysis.git_analysis:main"
code-graph-centrality = "analysis.centrality:main"
code-graph-similarity = "analysis.similarity:main"
code-graph-temporal = "analysis.temporal_analysis:main"
code-graph-cleanup = "utils.cleanup:main"
code-graph-schema = "data.schema_management:main"
code-graph-cve = "security.cve_analysis:main"
code-graph-pipeline-prefect = "pipeline.prefect_flow:main"
# Removed non-critical scripts to keep the codebase minimal
code-graph-create-db = "scripts.create_database:main"

[tool.black]
line-length = 100
target-version = ['py310']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''



[tool.mypy]
python_version = "3.11"
warn_return_any = false
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = false
disallow_untyped_decorators = false
no_implicit_optional = false
warn_redundant_casts = false
warn_unused_ignores = false
warn_no_return = false
warn_unreachable = false
strict_equality = false
# Allow missing type annotations during development
allow_untyped_calls = true
allow_incomplete_defs = true
allow_untyped_globals = true
# Suppress common errors until proper type annotations are added
disable_error_code = "var-annotated,no-any-return,assignment,operator,arg-type,misc,index"

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --disable-warnings -m 'not live'"
testpaths = [
    "tests",
]
python_files = [
    "test_*.py",
    "*_test.py",
]
python_classes = [
    "Test*",
]
python_functions = [
    "test_*",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "asyncio: marks tests as asyncio tests",
    "live: marks tests that require a live Neo4j instance",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "scripts/*",
]
relative_files = true

[tool.coverage.paths]
source = [
    "src",
    "*/neo4j-code-graph/src",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

# Ruff linter configuration (complements flake8 initially; can replace later)
[tool.ruff]
target-version = "py310"
line-length = 100

[tool.ruff.lint]
extend-select = ["E", "F", "I", "UP", "B"]
ignore = [
  "E501",  # Black handles line length
  "E402",  # allow module import order exceptions (matches flake8 extend-ignore)
  "B007",  # unused loop control variable (to be fixed later)
  "B011",  # assert False in tests (to be refactored later)
  "B017",  # pytest.raises(Exception) (to be refactored later)
  "UP036", # outdated version check blocks; to be cleaned incrementally
]

[tool.ruff.lint.per-file-ignores]
"tests/**" = ["D", "S101"]

# Align ruff formatter with Black to avoid flip-flopping
[tool.ruff.format]
quote-style = "double"
indent-style = "space"
line-ending = "lf"
skip-magic-trailing-comma = false
docstring-code-format = true

# codespell settings
[tool.codespell]
skip = "poetry.lock,*.lock,*.min.js,*.svg"
ignore-words-list = "ND,te,crate"

# interrogate (docstring coverage)
[tool.interrogate]
fail-under = 30
exclude = ["tests", "build", "dist"]
ignore-init-method = true
ignore-private = true
ignore-magic = true
verbose = 1
